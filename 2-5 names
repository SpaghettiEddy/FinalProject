/*
    COP3330 Final Project
    Ashley Fram
    Eduardo Vila
    John LASTNAME
 */


import java.io.IOException;
import java.util.Scanner;
import java.util.InputMismatchException;


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;



import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.stream.Stream;

import java.io.File;
import java.util.ArrayList;
import java.util.Scanner;

abstract class Course {
    private int crn;
    private String location;

    public int getCrn() {return crn;}
    public void setCrn(int crn) {this.crn = crn;}
    public String getLocation() {return location;}
    public void setLocation(String location) {this.location = location;}
}

class Lecture extends Course {
    private String prefix;
    private String title;
    private String gradLevel;
    private String modality;
    private boolean hasLab;

    public String getPrefix() {return prefix;}
    public void setPrefix(String prefix) {this.prefix = prefix;}
    public String getTitle() {return title;}
    public void setTitle(String title) {this.title = title;}
    public String getGradLevel() {return gradLevel;}
    public void setGradLevel(String gradLevel) {this.gradLevel = gradLevel;}
    public String getModality() {return modality;}
    public void setModality(String modality) {this.modality = modality;}
    public boolean isHasLab() {return hasLab;}
    public void setHasLab(boolean hasLab) {this.hasLab = hasLab;}

    public Lecture(int crn, String prefix, String title, String gradLevel, String modality) {  // Online lecture
        setCrn(crn);
        setPrefix(prefix);
        setTitle(title);
        setGradLevel(gradLevel);
        setModality(modality);
    }

    public Lecture(int crn, String prefix, String title, String gradLevel, String modality, String location, boolean hasLab) {
        setCrn(crn);
        setPrefix(prefix);
        setTitle(title);
        setGradLevel(gradLevel);
        setModality(modality);
        setLocation(location);
        setHasLab(hasLab);
    }
}

class Lab extends Course {
    public Lab(int crn, String location){
        setCrn(crn);
        setLocation(location);
    }
}

abstract class Person {
    private String name;
    private String id;
    private String rank;
    private String office;
    private int[] lectureTaught;
    private int courses;
    private String taId;
    private String taName;
    


  
      public String getTAId() {return taId;}
    public String getTAName() {return taName;}


public int[] getLectureTaught() {return lectureTaught;}
    public void setLectureTaught(int[] lectureTaught) {this.lectureTaught = lectureTaught;}

  
    public String getRank() {return rank;}
    public String getOffice() {return office;}
    public int getCourses() {return courses;}
  
    public String getUcfId() {return id;}

    public String getName() {return name;}
    public void setName(String name) {this.name = name;}
    public String getId() {return id;}
    public void setId(String id) {this.id = id;}

  
    public void setTAId (String taId) {this.taId = taId;}
    public void setTAName (String taName) {this.taName = taName;}
}

class Faculty extends Person{
   private String rank;
   private final String ucfId;
   private final String name;
   private final String office;
   private int courses;
   private int[] lecturesTaught;
   private int[] lab;

  


  public Faculty(String ucfId, String name, String rank, String office, int courses, int[] lecturesTaught, int[] lab) {
            this.ucfId = ucfId;
            this.name = name;
    this.rank = rank;
    this.office = office;
    this.courses = courses;
        this.lecturesTaught = lecturesTaught;
    this.lab = lab;
        }

        public String getUcfId() {
            return ucfId;
        }

        public String getName() {
            return name;
}
  public String getRank() {
            return rank;
        }
  public String getOffice() {
            return office;
        }
  public int getCourses() {
            return courses;
        }
 public int getLectureTaught(int i) {
        return lecturesTaught[i];
    }
  public int getLab(int i){
    return lab[i];
  }
}

class TA extends Person {
    private String advisor;
    private String degree;
    private String taId;
    private final String taName;

  
public TA(String taId, String taName) {
        this.taId = taId;
        this.taName = taName;
  
}

    public String getTAId() {
        return taId;
    }
 public void setTAId(String taId) {
    this.taId = taId;
  }


    public String getTAName() {
        return taName;
    }
}

class Student extends Person {
    private String studentType;
   private String stuId;
  private String stuName;


public Student (String stuId, String stuName){
  this.stuId = stuId;
  this.stuName = stuName;
}

    public String getStuId() {
        return this.stuId;
    }
    
    // getter method for student name
    public String getStuName() {
        return this.stuName;
    }
    
    // setter method for student ID
    public void setStuId(String stuId) {
        this.stuId = stuId;
    }
    
    // setter method for student name
    public void setStuName(String stuName) {
        this.stuName = stuName;
    }



}





 class IdException extends Exception {
    public IdException() {
        super("Sorry, incorrect format. IDs must be 7 digits.");
    }

    public IdException(String message) {
        super(message);
    }
}









public class Main {

    private static String menu() {
        Scanner myScan = new Scanner(System.in);
        String option;
        System.out.println("\n*****************************************");
        System.out.println("Choose one of these options:");
        System.out.println("\t1 - Add a new Faculty to the schedule");
        System.out.println("\t2 - Enroll a Student to a lecture");
        System.out.println("\t3 - Print the schedule of a Faculty");
        System.out.println("\t4 - Print the schedule of an TA");
        System.out.println("\t5 - Print the schedule of a Student");
        System.out.println("\t6 - Delete a scheduled lecture");
        System.out.println("\t7 - Exit Program");
        System.out.print("\t\t\tEnter your choice: ");
        option = myScan.nextLine();
        return option;
    }

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);
        Scanner fileScan;

        String line;
        String arr[];


        ArrayList<Course> courseList = new ArrayList<Course>();

        ArrayList<Person> people = new ArrayList<Person>();



        System.out.print("Enter the absolute path of the file: ");
        do {                                                // Run until file is successfully loaded
            String fileName = scanner.next();
            try {                                           // Attempts to take input from fileName
                fileScan = new Scanner(new File(fileName)); // If an exception is caught at this line...
                break;                                      // This line won't be reached (i.e. loop will never break)
            } catch (Exception e) {
                System.out.println("Sorry no such file.");  // On failed input, prompts for another input
                System.out.print("Try again: ");
            }
        } while (true);

        while (fileScan.hasNextLine()) {                     // Fill courseList with the courses in the lec.tct file
            line = fileScan.nextLine();
            arr = line.split(",");
            if (arr.length == 2) {  // If the array only has 2 elements, then it must be a lab
                Lab temp = new Lab(Integer.parseInt(arr[0]), arr[1]);
                courseList.add(temp);
            } else {                                  // If the array length is greater than 2, it must be a lecture
                if (arr[4].equalsIgnoreCase("Online")) {    // We call the constructor for an online lecture
                    //public Lecture(int crn, String prefix, String title, String gradLevel, String modality) {  // Online lecture
                    Lecture temp = new Lecture(Integer.parseInt(arr[0]), arr[1], arr[2], arr[3], arr[4]);
                    courseList.add(temp);
                } else {      // We call the constructor for a lecture that has a physical location
                    boolean hasLab = arr[6].equalsIgnoreCase("yes") ? true : false;
                    Lecture temp = new Lecture(Integer.parseInt(arr[0]), arr[1], arr[2], arr[3], arr[4], arr[5], hasLab);
                    courseList.add(temp);
                }
            }
        }

        System.out.println("File Found! Letâ€™s proceed...");

     

        String option = menu();

        while (!option.equals("0")) {
            switch (option) {
                case "1":
                    addFaculty(scanner, courseList, people);
                    break;
                case "2":
                    enrollStudent(scanner, courseList, people);
                    break;
                case "3":
                    printFacultySchedule(scanner, courseList, people);
                    break;
                case "4":
                    printTASchedule(scanner, courseList, people);
                    break;
                case "5":
                    printStudentSchedule(scanner, courseList, people);
                    break;
                case "6":
                    deleteLecture(scanner, courseList, people);
                    break;
                case "7":
                    goodBye(scanner, courseList, people);
                    break;
                default:
                    System.out.println("Invalid selection...");
            }
            option = menu();
        }
    }

    // Option 1 - Add a new Faculty to the schedule
    public static void addFaculty(Scanner scanner, ArrayList<Course> courseList, ArrayList<Person> people) {
        //Faculty temp = new Faculty();

        String tempId, tempName, tempRank, tempOffice;
        int numCourses;
        int lecturesTaught[];
        int tempLab[];
        tempLab = new int[3];


      //  people.add(temp);
       // System.out.print("Enter UCF id: ");
 while (true) {
        System.out.print("Enter UCF id: ");
        tempId = scanner.next();
        if (tempId.length() != 7 || !tempId.matches("\\d+")) {
            System.out.println("Invalid UCF ID. Please enter a 7-digit number.");
        } else {
            break;
        }
    }
         //tempId = scanner.next();
         scanner.nextLine();


    //   Check if the UCF ID already exists
    for (Person person : people) {
        if (person.getUcfId().equals(tempId)) {
            System.out.println("Faculty with this UCF ID already exists. Skipping name, rank, and office input.");
            return;
        }
    }






      
         System.out.print("Enter name: ");      
         tempName = scanner.nextLine();      


   while (true) {
        System.out.print("Enter rank: ");
        tempRank = scanner.next();
        if (!tempRank.equalsIgnoreCase("Professor")) {
            System.out.println("Invalid rank. Please enter 'Professor'.");
        } else {
            break;
        }
    }
    scanner.nextLine();


      

       //System.out.print("Enter rank: ");
     //  tempRank = scanner.next();
        System.out.print("Enter office location: ");
        tempOffice = scanner.next();
   
        System.out.print("Enter how many lectures: ");
        numCourses = scanner.nextInt();

        lecturesTaught = new int[numCourses];
        System.out.print("Enter the crns of the lectures: ");
        for (int i = 0; i < numCourses; i++)
            lecturesTaught[i] = scanner.nextInt();



      
Faculty tempFaculty = new Faculty(tempId, tempName, tempRank, tempOffice, numCourses, lecturesTaught, tempLab);
        people.add(tempFaculty);  

tempFaculty.setLectureTaught(lecturesTaught);


      
        for (int i = 0; i < numCourses; i++) {
            for (int j = 0; j < courseList.size(); j++) {
                if (courseList.get(j).getCrn() == lecturesTaught[i]) {
                    if (((Lecture) courseList.get(j)).getModality().equalsIgnoreCase("Online")) 
                        System.out.println("[" + courseList.get(j).getCrn() + "/" + ((Lecture) courseList.get(j)).getPrefix() +
                                "/" + ((Lecture) courseList.get(j)).getTitle() + "]" + " Added!");
                    else if (((Lecture) courseList.get(j)).isHasLab()) {
                        System.out.println("[" + courseList.get(j).getCrn() + "/" + ((Lecture) courseList.get(j)).getPrefix() +
                                "/" + ((Lecture) courseList.get(j)).getTitle() + "]" + " has these labs:");
                        for (int k = 0; k < 3; k++) {
                            System.out.println("\t\t\t" + courseList.get(j + k + 1).getCrn() + "," + courseList.get(j + k + 1).getLocation());
      
                            tempLab[k] = courseList.get(j + k + 1).getCrn();
                        
                    
                    }


                      
for (int k = 0; k < 3; k++) {


   System.out.print("\nEnter the TA's id for " + tempLab[k] + ": ");

   String tempTAId = scanner.next();
  //scanner.nextLine();
  
 
       
// Remember to check later if ta exists. For now ta does not
System.out.print("Name of TA: ");
    String tempTAName = scanner.next();                         

    
       TA tempTA = new TA(tempTAId, tempTAName); // create a new TA object
    people.add(tempTA);  
                          
System.out.print("TAâ€™s supervisorâ€™s name: ");
   String tempSupervisor = scanner.next();
System.out.print("Degree seeking: ");
   String tempDegree = scanner.next();
                        
      }
     }
    }               
   }                  
  }
 }

            
        
    


    // Option 2 - Enroll a Student to a Lecture
    public static void enrollStudent(Scanner scanner, ArrayList<Course> courseList, ArrayList<Person> people) {

String tempStuId;
      
 while (true) {
        System.out.print("Enter UCF id: ");
        tempStuId = scanner.next();
        if (tempStuId.length() != 7 || !tempStuId.matches("\\d+")) {
            System.out.println("Invalid UCF ID. Please enter a 7-digit number.");
        } else {
            break;
        }
    }
   // System.out.print("Enter UCF ID: ");
    //String tempStuId = scanner.next();
    scanner.nextLine(); 
      
boolean foundMatch = false; // add a flag to keep track if a match was found

           
for (Person person: people) {
  // if (person.getTAId().equals(tempStuId)) {
        if (person.getTAId() != null && person.getTAId().equals(tempStuId)) {


System.out.println("Record found/name: " + person.getTAName());
  foundMatch = true; // set flag to true if a match is found


 System.out.println("Which lecture to enroll " + person.getTAName() + " in: ");

System.out.println("[] has these labs: ");

System.out.print("[] is added to lab:");
scanner.nextLine();

                  }
        }




      
if (!foundMatch) {
System.out.print("Name of Student: "); 
String askStuName = scanner.next();
scanner.nextLine();
  
System.out.println("Which lecture to enroll " + askStuName + " in: ");


   
System.out.println("[] has these labs: \n");
  

System.out.print(askStuName + " is added to lab: ");
String stuLab = scanner.next();
scanner.nextLine();
}
      
      System.out.print("Student enrolled!");

      
    }





  
    // Option 3 - Print the schedule of a Faculty
    private static void printFacultySchedule(Scanner scanner, ArrayList<Course> courseList, ArrayList<Person> people) {
      
String tempId;
      
 while (true) {
        System.out.print("Enter UCF id: ");
        tempId = scanner.next();
        if (tempId.length() != 7 || !tempId.matches("\\d+")) {
            System.out.println("Invalid UCF ID. Please enter a 7-digit number.");
        } else {
            break;
        }
    }
     //   System.out.print("Enter UCF id: ");
       // String tempId = scanner.next();
        scanner.nextLine();
        
      boolean foundMatch = false; // add a flag to keep track if a match was found

      
         for (Person person : people) {
           // System.out.println("UCF ID: " + person.getUcfId());
            //if (person.getUcfId().equals(tempId)) {

                if (person.getUcfId() != null && person.getUcfId().equals(tempId)) {


              System.out.println(person.getName() + " is teaching the following lectures: \n");

              foundMatch = true; // set flag to true if a match is found
            

int[] personLectures = person.getLectureTaught();
for (int i = 0; i < personLectures.length; i++) {
    System.out.println("[" + personLectures[i] + "]");
}    
            }
         }
 

    // Check the flag and print error message if no matching UCF ID is found
     if (!foundMatch) {
       System.out.println("No Faculty with this id.");       }  }
            





  
  
    // Option 4 - Print the schedule of a TA
    private static void printTASchedule(Scanner scanner, ArrayList<Course> courseList, ArrayList<Person> people) {


       String tempTAId;
 while (true) {
        System.out.print("Enter UCF id: ");
        tempTAId = scanner.next();
        if (tempTAId.length() != 7 || !tempTAId.matches("\\d+")) {
            System.out.println("Invalid UCF ID. Please enter a 7-digit number.");
        } else {
            break;
        }
    }
      
        //System.out.print("Enter the TA's UCF id: ");
       // String tempTAId = scanner.next();
        scanner.nextLine();


        
      boolean foundMatch = false; // add a flag to keep track if a match was found

      
        for (Person person : people) {
                  //if (person.getTAId().equals(tempTAId)) {
        if (person.getTAId() != null && person.getTAId().equals(tempTAId)) {
          
            System.out.println(person.getTAName() + " is assisting the following lectures: \n");
                    foundMatch = true; // set flag to true if a match is found
        }
    }

    // Check the flag and print error message if no matching UCF ID is found
    if (!foundMatch) {
        System.out.println("No TA with this id.");
    }
    }


  

  
    // Option 5 - Print the schedule of a Student
    private static void printStudentSchedule(Scanner scanner, ArrayList<Course> courseList, ArrayList<Person> people) {
    String tempStuId;
       while (true) {
        System.out.print("Enter UCF id: ");
        tempStuId = scanner.next();
        if (tempStuId.length() != 7 || !tempStuId.matches("\\d+")) {
            System.out.println("Invalid UCF ID. Please enter a 7-digit number.");
        } else {
            break;
        }
    }

//System.out.print("Enter UCF id: ");
  //      String tempStuId = scanner.next();
        scanner.nextLine();
        
      boolean foundMatch = false; // add a flag to keep track if a match was found

      
         for (Person person : people) {
           // System.out.println("UCF ID: " + person.getUcfId());
           // if (person.getUcfId().equals(tempId)) {
        if (person.getUcfId() != null && person.getUcfId().equals(tempStuId)) {

              System.out.println(person.getName() + " is enrolled in the following lectures: \n");

              foundMatch = true; // set flag to true if a match is found
            

            }
         }
 

    // Check the flag and print error message if no matching UCF ID is found
     if (!foundMatch) {
       System.out.println("No Student with this id.");       }  


      
    }

    // Option 6 - Delete a Lecture
    private static void deleteLecture(Scanner scanner, ArrayList<Course> courseList, ArrayList<Person> people) {
      
      
lectureDeleted = true;
      
    }


  
// In method 7, user is prompted to print lec.txt ONLY IF deleteLecture() is run, else "Bye!"
  private static boolean lectureDeleted = false;

    // Option 7 - Exit
    private static void goodBye(Scanner scanner, ArrayList<Course> courseList, ArrayList<Person> people) {


if(lectureDeleted){

    System.out.print("You have made a deletion of at least one lecture. Would you like to print the copy of lec.txt? Enter y/Y for Yes or n/N for No: ");


while (true) {
    String response = scanner.nextLine().trim().toLowerCase();

    if (response.equals("y")) {
        System.out.println("Printing copy of lec.txt...");
        // code to print copy of lec.txt
      try {
                        Stream<String> lines = Files.lines(Paths.get("lec.txt"));
                        lines.forEach(System.out::println);
                    } catch (IOException e) {
                        System.out.println("An error occurred while reading the file.");
                    }
        break; // exit the loop
    } else if (response.equals("n")) {
        System.out.println("Okay, lec.txt will not be printed.");
        break; // exit the loop
    } else {
        System.out.print("Is that a yes or no? Enter y/Y for Yes or n/N for No: ");
    }
}
  System.out.print("Bye!");
  
} else {
          System.out.print("Bye!");
}
          System.exit(0);

    }









}

   

   
